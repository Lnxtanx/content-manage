"use strict";(()=>{var e={};e.id=631,e.ids=[631],e.modules={67096:e=>{e.exports=require("bcrypt")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},2934:(e,s,t)=>{t.r(s),t.d(s,{originalPathname:()=>y,patchFetch:()=>b,requestAsyncStorage:()=>m,routeModule:()=>f,serverHooks:()=>w,staticGenerationAsyncStorage:()=>j});var r={};t.r(r),t.d(r,{DELETE:()=>g,GET:()=>h,POST:()=>p});var a=t(49303),n=t(88716),o=t(60670),i=t(87070),c=t(20728),l=t(67096),d=t.n(l),u=t(30180);async function p(e){try{let s=e.headers.get("content-type")||"",t={},r=null;if(s.includes("multipart/form-data")){let s=await e.formData();t=Object.fromEntries(s.entries());let a=s.get("profileImage");if(a&&a.size>0){let e=Buffer.from(await a.arrayBuffer()),s=`teacher-profiles/${Date.now()}-${a.name}`;r=await (0,u.O)(e,s,a.type||"image/png","teacher-profiles")}}else t=await e.json();let{schoolId:a,teacherName:n,dob:o,email:l,password:p,qualification:h,experienceYears:g,phone_number:f,aadhaar_number:m}=t,j=[];console.log("Form data keys:",Object.keys(t));let w=[];for(let e of Object.keys(t)){let s=e.match(/subjectClassMappings\[(\d+)\]\[subjectId\]/);if(s){let e=parseInt(s[1]);w.includes(e)||w.push(e)}}for(let e of(console.log("Found subject indexes:",w),w)){let s=`subjectClassMappings[${e}][subjectId]`,r=parseInt(t[s].toString()),a=[];for(let s of Object.keys(t))if(s.match(RegExp(`subjectClassMappings\\[${e}\\]\\[classIds\\]\\[(\\d+)\\]`))){let e=parseInt(t[s].toString());a.push(e)}let n=`subjectClassMappings[${e}][classIds][]`;if(t[n]&&(Array.isArray(t[n])?t[n].forEach(e=>{a.push(parseInt(e))}):a.push(parseInt(t[n].toString()))),!isNaN(r)&&a.length>0){let e=Array.from(new Set(a));j.push({subjectId:r,classIds:e}),console.log(`Added mapping for subject ${r} with classes: ${e.join(", ")}`)}}console.log("Extracted subject-class mappings:",JSON.stringify(j));let y=t["sections[]"]?Array.isArray(t["sections[]"])?t["sections[]"]:[t["sections[]"]]:[],b=t["assignedclasses[]"]?Array.isArray(t["assignedclasses[]"])?t["assignedclasses[]"]:[t["assignedclasses[]"]]:[];if(!a||!n||!l||!p||!o||!f||!m)return i.NextResponse.json({error:"Missing required fields"},{status:400});if(0===j.length)return i.NextResponse.json({error:"At least one subject must be selected"},{status:400});if(j.some(e=>0===e.classIds.length))return i.NextResponse.json({error:"Please select at least one class for each selected subject"},{status:400});if(0===y.length)return i.NextResponse.json({error:"At least one section must be selected"},{status:400});if(await c.Z.teacher.findFirst({where:{OR:[{email:l},{aadhaar_number:m}]}}))return i.NextResponse.json({error:"Teacher with this email or Aadhaar already exists"},{status:400});let _=await d().hash(p,10),E=await c.Z.$transaction(async e=>{let s=await e.teacher.create({data:{teacherName:n,dob:new Date(o),email:l,password:_,qualification:h,experienceYears:g?parseInt(g):void 0,phone_number:f,aadhaar_number:m,profileImage:r,updatedAt:new Date,schools:{connect:{id:parseInt(a)}}}});await e.$executeRaw`
        UPDATE teachers 
        SET 
          assignedclasses = ${b.map(String)},
          assignedsections = ${y}
        WHERE id = ${s.id}
      `;let t=await Promise.all(j.flatMap(s=>s.classIds.map(async s=>{let t=await e.class.findUnique({where:{id:s}});return t?.name||""}))),i=Array.from(new Set(t.filter(Boolean)));console.log(`Assigning classes to teacher: ${i.join(", ")}`),await e.teacher.update({where:{id:s.id},data:{assignedclasses:i,assignedsections:y}}),console.log(`Creating ${j.length} subject mappings for teacher ID ${s.id}`);let c=j.reduce((e,s)=>e+s.classIds.length,0);for(let t of(console.log(`Will create a total of ${c} teacher-class-subject relationships`),j))for(let r of t.classIds)try{console.log(`Inserting relationship: teacher=${s.id}, subject=${t.subjectId}, class=${r}`),await e.teacher_class_subject.findFirst({where:{teacher_id:s.id,subject_id:t.subjectId,class_id:r}})?console.log("Relationship already exists, skipping"):(await e.teacher_class_subject.create({data:{teacher_id:s.id,subject_id:t.subjectId,class_id:r}}),console.log("Successfully created relationship"))}catch(e){console.error(`Error creating relationship: ${e}`)}return s});return i.NextResponse.json(E)}catch(e){return console.error("Error registering teacher:",e),i.NextResponse.json({error:"Error registering teacher"},{status:500})}}async function h(e){try{let{searchParams:s}=new URL(e.url),t=s.get("schoolId"),r=t?{schoolId:parseInt(t)}:{},a=await c.Z.teacher.findMany({where:r,include:{schools:{select:{id:!0,name:!0}}}}),n=await Promise.all(a.map(async e=>{let s=await c.Z.teacher_class_subject.findMany({where:{teacher_id:e.id},select:{class_id:!0,subject_id:!0}}),t=Array.from(new Set(s.map(e=>e.class_id))),r=Array.from(new Set(s.map(e=>e.subject_id)));return{...e,school_name:e.schools?.name||"",class_ids:t,subject_ids:r}}));return i.NextResponse.json(n)}catch(e){return console.error("Error fetching teachers:",e),i.NextResponse.json({error:"Error fetching teachers"},{status:500})}}async function g(e){try{let{searchParams:s}=new URL(e.url),t=s.get("id");if(!t)return i.NextResponse.json({error:"Teacher ID is required"},{status:400});return await c.Z.teacher.delete({where:{id:parseInt(t)}}),i.NextResponse.json({message:"Teacher deleted successfully"})}catch(e){return console.error("Error deleting teacher:",e),i.NextResponse.json({error:"Error deleting teacher"},{status:500})}}let f=new a.AppRouteRouteModule({definition:{kind:n.x.APP_ROUTE,page:"/api/teacher-registration/route",pathname:"/api/teacher-registration",filename:"route",bundlePath:"app/api/teacher-registration/route"},resolvedPagePath:"C:\\internships\\devbumi sportal foundation\\content-manneger\\src\\app\\api\\teacher-registration\\route.ts",nextConfigOutput:"standalone",userland:r}),{requestAsyncStorage:m,staticGenerationAsyncStorage:j,serverHooks:w}=f,y="/api/teacher-registration/route";function b(){return(0,o.patchFetch)({serverHooks:w,staticGenerationAsyncStorage:j})}},20728:(e,s,t)=>{t.d(s,{Z:()=>a});let r=require("@prisma/client"),a=globalThis.prisma??new r.PrismaClient},30180:(e,s,t)=>{t.d(s,{O:()=>n});let r=require("@aws-sdk/client-s3"),a=new r.S3Client({region:process.env.AWS_REGION,credentials:{accessKeyId:process.env.AWS_ACCESS_KEY_ID,secretAccessKey:process.env.AWS_SECRET_ACCESS_KEY}});async function n(e,s,t="application/pdf",n="lessons"){let o=new r.PutObjectCommand({Bucket:process.env.S3_BUCKET_NAME,Key:`${n}/${s}`,Body:e,ContentType:t});return await a.send(o),`https://${process.env.S3_BUCKET_NAME}.s3.${process.env.AWS_REGION}.amazonaws.com/${n}/${s}`}}};var s=require("../../../webpack-runtime.js");s.C(e);var t=e=>s(s.s=e),r=s.X(0,[276,972],()=>t(2934));module.exports=r})();