generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Teacher {
  id                    Int                     @id @default(autoincrement())
  schoolId              Int
  teacherName           String                  @db.VarChar(100)
  dob                   DateTime                @db.Timestamp(6)
  email                 String                  @unique @db.VarChar(255)
  password              String                  @db.VarChar(255)
  profileImage          String?                 @db.VarChar(1000)
  qualification         String?                 @db.VarChar(100)
  experienceYears       Int?
  status                String                  @default("active") @db.VarChar(20)
  createdAt             DateTime                @default(now()) @db.Timestamp(6)
  updatedAt             DateTime                @db.Timestamp(6)
  subject_id            Int?
  phone_number          String?                 @db.VarChar(20)
  aadhaar_number        String?                 @unique @db.VarChar(12)
  assignedclasses       String[]                @default([]) @db.VarChar(100)
  assignedsections      String[]                @default([]) @db.VarChar(10)
  ClassResponse         ClassResponse[]
  EventApplication      EventApplication[]
  LeaveApplication      LeaveApplication[]
  LessonLog             LessonLog[]
  teacher_class_subject teacher_class_subject[]
  schools               schools                 @relation(fields: [schoolId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_teacher_school")
  subject               subject?                @relation(fields: [subject_id], references: [id], onUpdate: NoAction, map: "fk_teacher_subject")
  timetables            Timetable[]

  @@index([email])
  @@index([schoolId])
  @@map("teachers")
}

model Timetable {
  id          Int      @id @default(autoincrement())
  teacherId   Int
  periodTimes String[] @default([])
  createdAt   DateTime @default(now()) @db.Timestamp(6)
  updatedAt   DateTime @default(now()) @db.Timestamp(6)
  isActive    Boolean  @default(true)
  imageurl    String?
  imageUrl    String   @default("") @db.VarChar(1000)
  teachers    Teacher  @relation(fields: [teacherId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_timetable_teacher")

  @@index([teacherId])
  @@map("timetables")
}

model Class {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @unique @db.VarChar
  LessonLog             LessonLog[]
  LessonPdf             LessonPdf[]
  teacher_class_subject teacher_class_subject[]
}

model ClassResponse {
  id          Int       @id @default(autoincrement())
  schoolId    Int
  teacherId   Int
  classLevel  String    @db.VarChar
  lessonName  String    @db.VarChar
  status      String    @db.VarChar
  reason      String?
  imageUrl    String?
  submittedAt DateTime? @default(now()) @db.Timestamp(6)
  schools     schools   @relation(fields: [schoolId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_response_school")
  teachers    Teacher   @relation(fields: [teacherId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_response_teacher")
}

model EventApplication {
  id          Int      @id @default(autoincrement())
  schoolId    Int
  teacherId   Int
  eventName   String   @db.VarChar
  eventDate   DateTime @db.Timestamp(6)
  description String?
  status      String?  @default("Pending") @db.VarChar
  schools     schools  @relation(fields: [schoolId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_event_school")
  teachers    Teacher  @relation(fields: [teacherId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_event_teacher")
}

model LeaveApplication {
  id        Int       @id @default(autoincrement())
  schoolId  Int
  teacherId Int
  reason    String
  fromDate  DateTime  @db.Timestamp(6)
  toDate    DateTime  @db.Timestamp(6)
  status    String?   @default("Pending") @db.VarChar
  createdAt DateTime? @default(now()) @db.Timestamp(6)
  schools   schools   @relation(fields: [schoolId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_leave_school")
  teachers  Teacher   @relation(fields: [teacherId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_leave_teacher")
}

model LessonLog {
  id         Int       @id @default(autoincrement())
  schoolId   Int
  teacherId  Int
  classId    Int
  lessonName String    @db.VarChar
  date       DateTime? @default(now()) @db.Timestamp(6)
  remarks    String?
  Class      Class     @relation(fields: [classId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_lessonlog_class")
  schools    schools   @relation(fields: [schoolId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_lessonlog_school")
  teachers   Teacher   @relation(fields: [teacherId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_lessonlog_teacher")
}

model LessonPdf {
  id               Int      @id @default(autoincrement())
  classId          Int
  lessonName       String   @db.VarChar
  pdfUrl           String
  schoolId         Int?
  isForAllSchools  Boolean  @default(false)
  createdAt        DateTime @default(now()) @db.Timestamp(6)
  updatedAt        DateTime @default(now()) @db.Timestamp(6)
  subject_id       Int?
  lessonoutcomes   String?
  lessonobjectives String?
  Class            Class    @relation(fields: [classId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_lessonpdf_class")
  schools          schools? @relation(fields: [schoolId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_lessonpdf_school")
  subject          subject? @relation(fields: [subject_id], references: [id], onUpdate: NoAction, map: "fk_subject")

  @@index([classId])
  @@index([schoolId])
}

model schools {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar
  email            String             @unique @db.VarChar
  password         String             @db.VarChar
  createdAt        DateTime           @default(now()) @db.Timestamp(6)
  updatedAt        DateTime           @db.Timestamp(6)
  isActive         Boolean            @default(true)
  logo             String?
  address          String?
  principal_name   String?            @db.VarChar(255)
  location         String?
  school_address   String?
  ClassResponse    ClassResponse[]
  EventApplication EventApplication[]
  LeaveApplication LeaveApplication[]
  LessonLog        LessonLog[]
  LessonPdf        LessonPdf[]
  announcement     announcement[]
  job_post         job_post[]
  notification     notification[]
  teachers         Teacher[]

  @@index([email])
}

model announcement {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
  content   String
  date      DateTime @default(now()) @db.Timestamp(6)
  school_id Int
  schools   schools  @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_announcement_school")

  @@index([school_id], map: "idx_announcement_school_id")
}

model faq {
  id          Int       @id @default(autoincrement())
  question    String
  answer      String?
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  answered_at DateTime? @db.Timestamp(6)
}

model job_post {
  id                 Int       @id @default(autoincrement())
  type               String    @db.VarChar(100)
  position           String    @db.VarChar(150)
  qualification      String
  experience         String?
  additional_message String?
  created_at         DateTime? @default(now()) @db.Timestamp(6)
  school_id          Int?
  schools            schools?  @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_jobpost_school")

  @@index([school_id], map: "idx_job_post_school")
}

model notification {
  id         Int       @id @default(autoincrement())
  type       String    @db.VarChar(50)
  title      String
  message    String?
  is_read    Boolean?  @default(false)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  school_id  Int?
  schools    schools?  @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_notification_school")

  @@index([school_id], map: "idx_notification_school_id")
}

model subject {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @unique @db.VarChar(100)
  code                  String?                 @db.VarChar(20)
  LessonPdf             LessonPdf[]
  teacher_class_subject teacher_class_subject[]
  teachers              Teacher[]
}

model teacher_class_subject {
  id         Int     @id @default(autoincrement())
  teacher_id Int
  class_id   Int
  subject_id Int
  Class      Class   @relation(fields: [class_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_class")
  subject    subject @relation(fields: [subject_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_subject")
  teachers   Teacher @relation(fields: [teacher_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_teacher")

  @@unique([teacher_id, class_id, subject_id])
}
